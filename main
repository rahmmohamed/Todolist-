// main.cpp
#include <iostream>
using namespace std;
typedef struct Task {
    string description;
    bool completed;
    struct Task* next;
    struct Task* prev;
} Task;

typedef struct TaskList {
    Task* debut;
    Task* fin;
    int size=0;
} TaskList;
void init(TaskList* list) {
    
   Task* newTask = new Task();
    newTask->description = "";
    newTask->completed = false;
    newTask->next = nullptr;
    newTask->prev = nullptr;
    list->debut = newTask;
    list->fin = newTask;
}
void addTask(TaskList **list) {
cout<<"Enter task description: ";
string desc;
cin.ignore(); // To ignore the newline character left in the buffer
getline(cin, desc);
Task* newTask = new Task();
newTask->description = desc;
newTask->completed = false;
if((*list)->size == 0) {
    (*list)->debut = newTask;
    (*list)->fin = newTask;
    }
else {
    newTask->prev = (*list)->fin;
    (*list)->fin->next = newTask;
    (*list)->fin = newTask;
}
(*list)->size++;
}
void deleteTask(TaskList **list, int index) {
if(index < 0 || index >= (*list)->size) {
    cout << "Invalid index" << endl;
    return;

}
int i = 0;
Task* current = (*list)->debut;
while(i < index) {
    current = current->next;
    i++;
}
current->prev->next = current->next;
current->next->prev = current->prev;
free(current);
(*list)->size--;

}









void switchcase(int choice){
    switch(choice){
        case 1:
        cout<<"Add Task";
        break;
        case 2:
        cout<<"Delete Task";
        break;
        case 3:
        cout<<"View Tasks";
        break;
        case 4:
        cout<<"mark Task as Completed";
        break;
        default:
        cout<<"Invalid choice";
    }
}
int enterchoice(){
cout<<"Enter your choice";
int choice;
cin>>choice;
return choice;
}
void display()
{
cout<<"Hello to todolist|n";
cout<<"1- Add Task\n";
cout<<"2- Delete Task\n";
cout<<"3- View Tasks\n";
cout<<"4-mark Task as Completed\n";


}
int main()
{
display();
   switchcase(enterchoice());
    return 0;
}

#include <iostream>
using namespace std;

struct Task {
    string description;
    bool completed;
    Task* next;
    Task* prev;
};

struct TaskList {
    Task* debut;
    Task* fin;
    int size;
};

void init(TaskList* list) {
    list->debut = nullptr;
    list->fin = nullptr;
    list->size = 0;
}

void addTask(TaskList* list) {
    cout << "Enter task description: ";
    cin.ignore();
    string desc;
    getline(cin, desc);

    Task* newTask = new Task();
    newTask->description = desc;
    newTask->completed = false;
    newTask->next = nullptr;
    newTask->prev = nullptr;

    if (list->size == 0) {
        list->debut = newTask;
        list->fin = newTask;
    } else {
        newTask->prev = list->fin;
        list->fin->next = newTask;
        list->fin = newTask;
    }
    list->size++;
    cout << "Task added successfully!\n";
}

void deleteTask(TaskList* list, int index) {
    if (index < 0 || index >= list->size) {
        cout << "Invalid index\n";
        return;
    }

    Task* current = list->debut;
    for (int i = 0; i < index; i++) {
        current = current->next;
    }

    if (current->prev == nullptr) {
        list->debut = current->next;
        if (list->debut != nullptr)
            list->debut->prev = nullptr;
    } else if (current->next == nullptr) {
        list->fin = current->prev;
        list->fin->next = nullptr;
    } else {
        current->prev->next = current->next;
        current->next->prev = current->prev;
    }

    delete current;
    list->size--;
    cout << "Task deleted successfully!\n";
}

void viewTasks(TaskList* list) {
    if (list->size == 0) {
        cout << "No tasks available.\n";
        return;
    }

    Task* current = list->debut;
    int index = 0;
    while (current != nullptr) {
        cout << index << ". " << current->description;
        if (current->completed) cout << " [Completed]";
        cout << endl;
        current = current->next;
        index++;
    }
}

void markTaskCompleted(TaskList* list, int index) {
    if (index < 0 || index >= list->size) {
        cout << "Invalid index\n";
        return;
    }

    Task* current = list->debut;
    for (int i = 0; i < index; i++) {
        current = current->next;
    }

    current->completed = true;
    cout << "Task marked as completed!\n";
}

void displayMenu() {
    cout << "\n===== TO-DO LIST =====\n";
    cout << "1. Add Task\n";
    cout << "2. Delete Task\n";
    cout << "3. View Tasks\n";
    cout << "4. Mark Task as Completed\n";
    cout << "5. Exit\n";
    cout << "======================\n";
    cout << "Enter your choice: ";
}

int main() {
    TaskList list;
    init(&list);

    int choice;
    do {
        displayMenu();
        cin >> choice;

        switch (choice) {
            case 1:
                addTask(&list);
                break;
            case 2: {
                int idx;
                cout << "Enter index to delete: ";
                cin >> idx;
                deleteTask(&list, idx);
                break;
            }
            case 3:
                viewTasks(&list);
                break;
            case 4: {
                int idx;
                cout << "Enter index to mark as completed: ";
                cin >> idx;
                markTaskCompleted(&list, idx);
                break;
            }
            case 5:
                cout << "Exiting program...\n";
                break;
            default:
                cout << "Invalid choice! Try again.\n";
        }

    } while (choice != 5);

    return 0;
}
